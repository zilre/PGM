%COMPUTEEXACTMARGINALSBP Runs exact inference and returns the marginals
%over all the variables (if isMax == 0) or the max-marginals (if isMax == 1). 
%
%   M = COMPUTEEXACTMARGINALSBP(F, E, isMax) takes a list of factors F,
%   evidence E, and a flag isMax, runs exact inference and returns the
%   final marginals for the variables in the network. If isMax is 1, then
%   it runs exact MAP inference, otherwise exact inference (sum-prod).
%   It returns an array of size equal to the number of variables in the 
%   network where M(i) represents the ith variable and M(i).val represents 
%   the marginals of the ith variable. 
%
% Copyright (C) Daphne Koller, Stanford University, 2012


function M = ComputeExactMarginalsBP(F, E, isMax)

% initialization
% you should set it to the correct value in your code
M = [];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE
%
% Implement Exact and MAP Inference.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%get the list of variable in the clique tree
V = unique([F(:).var]);




%create the clique tree
P=CreateCliqueTree(F,E);
%now calibrate the clique tree
Pcalibrate = CliqueTreeCalibrate(P, isMax);


for i = 1 : length(V) %iterate thru each variable
	 for j = 1 : length(F) %iterate thru each factor
		  
            if (~isempty(find(F(j).var == i)))
				%the varilables in the clique to marginalize over
                marginalize=setdiff( F(j).var, i);
                if length(marginalize)  ==0
                    M{1}=F(j);
                end
                display([i, F(j).var]);
                break;
            end
     end%for loop thru Factors
end%for loop thru variables


end
